#include<stdio.h>
#include<stdlib.h>


struct node{
	int data;
	struct node *left;
	struct node *right;	
};
typedef struct node *BTREE;

BTREE new_node(int x){
	BTREE p;
	p=(BTREE)malloc(sizeof(struct node));
	p->data=x;
	p->left=p->right=NULL;
	
	return p;
}

BTREE insert(BTREE root,int x){
	if(root==NULL)
		root=new_node(x);
		
	else{
		if(x< root->data)
			root->left=insert(root->left,x);
	
		else
			root->right=insert(root->right,x);
	}

	
	return root;
}

void inorder(BTREE root){
	if(root!=NULL){
		inorder(root->left);
		printf("%3d",root->data);
		inorder(root->right);
	}
}
int height(BTREE root){

	if(root==NULL)
		return -1;
	
	else{
		int left_height=height(root->left);
		int right_height=height(root->right);
		
		if(right_height>left_height)
			return right_height+1;
		
		else
			return left_height+1;
			
	
	}
}



BTREE delete(BTREE root,int x){
	BTREE p,q;
	if(root==NULL)
		return NULL;
	
	else{
		if(root->data==x){
			if(root->left== root->right){
				free(root);
				return NULL;
			}
		}
	}
	else if(root->right==NULL){
			p=root->left;
			free(root);
		return p;
	}
	else{
		p=q=root->right;
		while(p->left!=NULL){
				p=q->left;
				p->left=root->left;
				free(root);
			return q;
		}
	}

}

main(){
	BTREE myroot=NULL;
	int i;
	printf("Agaca eklenecek verileri giriniz:\n");
	scanf("%d",&i);
	while(i!=-1){
		myroot=insert(myroot,i);
		scanf("%d",&i);
	}
	
	printf("Olusturdugunuz inorder agac:");
	inorder(myroot);
	printf("\n");
	

	printf("Olusturdugunuz agacin uzunlugu:%d\n",height(myroot));
	
	
}


